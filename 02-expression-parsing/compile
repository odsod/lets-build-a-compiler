#!/usr/bin/env python3

import sys


look = None
remaining_code = None


def main():
    if len(sys.argv) < 2:
        print('No input file specified', sys.stderr)
        sys.exit(1)
    load_input_file(sys.argv[1])
    init()
    expression()


def load_input_file(input_file):
    global remaining_code
    with open(input_file) as f:
        remaining_code = f.read()


def get_char():
    global look, remaining_code
    if remaining_code:
        look = remaining_code[0]
        remaining_code = remaining_code[1:]
    else:
        error('Tried to read past end of file')


def error(msg):
    print('Error: {}'.format(msg), sys.stderr)


def abort(msg):
    error(msg)
    sys.exit(1)


def expected(msg):
    abort('{} expected'.format(msg))


def match(expected_char):
    if look == expected_char:
        get_char()
    else:
        expected(expected_char)


def is_alpha(char):
    return char.isalpha()


def is_digit(char):
    return char.isdigit()


def get_num():
    if not is_digit(look):
        expected('integer')
    result = look
    get_char()
    return result


def get_identifier():
    if not is_alpha(look):
        expected('identifier')
    result = look.upper()
    get_char()
    return result


def emit(s):
    sys.stdout.write('    {}'.format(s))


def emit_ln(s):
    emit(s)
    sys.stdout.write('\n')


def factor():
    if look == '(':
        match('(')
        expression()
        match(')')
    else:
        emit_ln('mov eax, {}'.format(get_num()))


def multiply():
    match('*')
    factor()
    emit_ln('pop edx')
    emit_ln('imul eax, edx')


def divide():
    match('/')
    factor()
    emit_ln('mov ebx, eax')
    emit_ln('pop eax')
    emit_ln('cdq eax')
    emit_ln('idiv ebx')


def add():
    match('+')
    term()
    emit_ln('pop edx')
    emit_ln('add eax, edx')


def subtract():
    match('-')
    term()
    emit_ln('pop edx')
    emit_ln('sub eax, edx')
    emit_ln('neg eax')


def term():
    factor()
    while look in {'*', '/'}:
        emit_ln('push eax')
        if look == '*':
            multiply()
        elif look == '/':
            divide()
        else:
            expected('mulop')


def is_addop(char):
    return char in {'+', '-'}


def expression():
    if is_addop(look):
        emit_ln('xor eax, eax')
    else:
        term()
    while is_addop(look):
        emit_ln('push eax')
        if look == '+':
            add()
        elif look == '-':
            subtract()
        else:
            expected('addop')


def init():
    get_char()


if __name__ == '__main__':
    main()
